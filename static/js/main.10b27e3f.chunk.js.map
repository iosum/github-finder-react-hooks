{"version":3,"sources":["components/repo-list/repo-list.component.jsx","components/card/card.component.jsx","components/profile/profile.component.jsx","App.js","serviceWorker.js","index.js"],"names":["RepoList","repo","name","description","html_url","forks_count","watchers_count","stargazers_count","className","href","target","rel","Card","username","avatar_url","repos","src","alt","map","index","key","Profile","useState","searchField","setSearchField","setUsername","setRepos","isInitialMount","useRef","useEffect","fetchProfile","a","fetch","profileResponse","json","profileJson","repos_url","reposJson","current","type","value","onChange","e","toLowerCase","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uWAyBeA,G,YApBE,SAAC,GAA8F,IAAD,IAA3FC,KAAQC,EAAmF,EAAnFA,KAAMC,EAA6E,EAA7EA,YAAaC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,iBACpF,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,WACb,4BAAKN,GACL,2BAAIC,IAEN,yBAAKK,UAAU,UACb,wCAAcH,GACd,4CAAkBC,GAClB,yCAAeC,GAEf,uBAAGE,KAAML,EAAUM,OAAO,SAASC,IAAI,sBAAsBH,UAAU,iBAAvE,iBCaOI,EAzBF,SAAC,GAAyD,IAAD,IAAtDC,SAAYX,EAA0C,EAA1CA,KAAMY,EAAoC,EAApCA,WAAYV,EAAwB,EAAxBA,SAAYW,EAAY,EAAZA,MAExD,OACE,yBAAKP,UAAU,kBACb,yBAAKA,UAAU,QACb,yBAAKQ,IAAKF,EAAYG,IAAI,WAC1B,yBAAKT,UAAU,qBACb,8BAAON,GACP,uBAAGO,KAAML,EAAUM,OAAO,SAASC,IAAI,sBAAsBH,UAAU,YAAvE,kBAIJ,yBAAKA,UAAU,SAEXO,EAAMG,KAAI,SAACjB,EAAMkB,GAAP,OACR,kBAAC,EAAD,CAAUC,IAAKD,EAAOlB,KAAMA,UCkCzBoB,G,MAhDC,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACbC,EADa,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAEbT,EAFa,KAEHY,EAFG,OAGMH,mBAAS,IAHf,mBAGbP,EAHa,KAGNW,EAHM,KAUdC,EAAiBC,kBAAO,GAyB9B,OAvBAC,qBAAU,WACR,IAAMC,EAAY,uCAAG,kCAAAC,EAAA,sEACWC,MAAM,gCAAD,OAAiCT,IADjD,cACbU,EADa,gBAEOA,EAAgBC,OAFvB,cAEbC,EAFa,gBAICH,MAAM,GAAD,OAAIG,EAAYC,UAAhB,kBAJN,cAIbrB,EAJa,iBAKKA,EAAMmB,OALX,QAKbG,EALa,OAQfF,IACFV,EAAYU,GACZT,EAASW,IAVQ,4CAAH,qDAadV,EAAeW,QACjBX,EAAeW,SAAU,EAGzBR,MAED,CAACP,IAIF,yBAAKf,UAAU,oBAEb,2BAAO+B,KAAK,SAASC,MAAOjB,EAAakB,SAjCtB,SAAAC,GACrBlB,EAAekB,EAAEhC,OAAO8B,MAAMG,gBAgCuCnC,UAAU,eAC5EK,EACC,kBAAC,EAAD,CAAMA,SAAUA,EAAUE,MAAOA,IAC/B,QCjCK6B,MATf,WACE,OACE,yBAAKpC,UAAU,OACb,6CACA,kBAAC,EAAD,QCGcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10b27e3f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './repo-list.styles.scss';\r\n\r\n\r\nconst RepoList = ({ repo: { name, description, html_url, forks_count, watchers_count, stargazers_count } }) => {\r\n  return (\r\n    <div className='repo-container'>\r\n      <div className='details'>\r\n        <h5>{name}</h5>\r\n        <p>{description}</p>\r\n      </div>\r\n      <div className='counts'>\r\n        <span>Forks: {forks_count}</span>\r\n        <span>Watchers : {watchers_count}</span>\r\n        <span>Stars : {stargazers_count}</span>\r\n\r\n        <a href={html_url} target=\"_blank\" rel='noopener noreferrer' className='view-repo-btn'>View Repo</a>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoList;","import React from \"react\";\r\n\r\nimport \"./card.styles.scss\";\r\nimport RepoList from \"../repo-list/repo-list.component\";\r\n\r\nconst Card = ({ username: { name, avatar_url, html_url }, repos }) => {\r\n\r\n  return (\r\n    <div className='card-container'>\r\n      <div className='card'>\r\n        <img src={avatar_url} alt=\"avatar\" />\r\n        <div className='profile-container'>\r\n          <span>{name}</span>\r\n          <a href={html_url} target=\"_blank\" rel='noopener noreferrer' className='card-btn'>View Profile</a>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='repos'>\r\n        {\r\n          repos.map((repo, index) => (\r\n            <RepoList key={index} repo={repo} />\r\n          ))\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport Card from '../card/card.component';\r\n\r\nimport './profile.styles.scss';\r\n\r\nconst Profile = () => {\r\n  const [searchField, setSearchField] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [repos, setRepos] = useState([]);\r\n\r\n  const onSearchChange = e => {\r\n    setSearchField(e.target.value.toLowerCase());\r\n  };\r\n\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const fetchProfile = async () => {\r\n      const profileResponse = await fetch(`https://api.github.com/users/${searchField}`);\r\n      const profileJson = await profileResponse.json();\r\n\r\n      const repos = await fetch(`${profileJson.repos_url}?sort=created`);\r\n      const reposJson = await repos.json();\r\n\r\n\r\n      if (profileJson) {\r\n        setUsername(profileJson);\r\n        setRepos(reposJson);\r\n      }\r\n    };\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    }\r\n    else {\r\n      fetchProfile();\r\n    }\r\n  }, [searchField]);\r\n\r\n\r\n  return (\r\n    <div className='search-container'>\r\n\r\n      <input type=\"search\" value={searchField} onChange={onSearchChange} className='search-box' />\r\n      {username ?\r\n        <Card username={username} repos={repos} />\r\n        : null}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\nimport './App.css';\nimport Profile from './components/profile/profile.component';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Github Finder</h1>\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}